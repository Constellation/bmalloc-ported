commit 6cb86933a2191f07941a1cba9c19da420eb17d04
Author: Yusuke Suzuki <utatane.tea@gmail.com>
Date:   Mon Sep 29 03:56:58 2014 +0900

    fix for gcc

diff --git a/bmalloc/AsyncTask.h b/bmalloc/AsyncTask.h
index 504da81..953921d 100644
--- a/bmalloc/AsyncTask.h
+++ b/bmalloc/AsyncTask.h
@@ -64,7 +64,7 @@ class AsyncTask {
     Function m_function;
 };
 
-template<typename Object, typename Function> const std::chrono::seconds AsyncTask<Object, Function>::exitDelay;
+template<typename Object, typename Function> const constexpr std::chrono::seconds AsyncTask<Object, Function>::exitDelay;
 
 template<typename Object, typename Function>
 AsyncTask<Object, Function>::AsyncTask(Object& object, const Function& function)
diff --git a/bmalloc/BPlatform.h b/bmalloc/BPlatform.h
index e387259..058ee6c 100644
--- a/bmalloc/BPlatform.h
+++ b/bmalloc/BPlatform.h
@@ -27,6 +27,8 @@
 #define BPlatform_h
 
 #ifdef __APPLE__
+#include <Availability.h>
+#include <AvailabilityMacros.h>
 #include <TargetConditionals.h>
 #endif
 
@@ -36,9 +38,20 @@
     || (defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE) \
     || (defined(TARGET_IPHONE_SIMULATOR) && TARGET_IPHONE_SIMULATOR))
 #define BPLATFORM_IOS 1
+#elif defined(__APPLE__)
+#define BPLATFORM_OS_X 1
 #endif
 
+#define BCOMPILER(COMPILER) (defined BCOMPILER_##PLATFORM && BCOMPILER_##PLATFORM)
 #define BCOMPILER_SUPPORTS(COMPILER_FEATURE) (defined BCOMPILER_SUPPORTS_##COMPILER_FEATURE && BCOMPILER_SUPPORTS_##COMPILER_FEATURE)
+
+#if defined(__clang__)
+#define BCOMPILER_CLANG 1
 #define BCOMPILER_SUPPORTS_CXX_THREAD_LOCAL (defined(__has_feature) && __has_feature(cxx_thread_local))
+#elif defined(__GNUC__)
+#define BCOMPILER_GCC 1
+#define BCOMPILER_SUPPORTS_CXX_THREAD_LOCAL 1
+#endif
+
 
 #endif // BPlatform_h
diff --git a/bmalloc/PerThread.h b/bmalloc/PerThread.h
index d0a2516..25a4f1f 100644
--- a/bmalloc/PerThread.h
+++ b/bmalloc/PerThread.h
@@ -30,7 +30,7 @@
 #include "Inline.h"
 #include <mutex>
 #include <pthread.h>
-#if defined(__has_include) && __has_include(<System/pthread_machdep.h>)
+#ifdef __APPLE__
 #include <System/pthread_machdep.h>
 #endif
 
@@ -54,7 +54,7 @@ class PerThread {
 
 template<typename T> struct PerThreadStorage;
 
-#if defined(__has_include) && __has_include(<System/pthread_machdep.h>)
+#ifdef __APPLE__
 // For now, we only support PerThread<Cache>. We can expand to other types by
 // using more keys.
 
@@ -114,7 +114,7 @@ class PerThread {
 template<typename T>
 INLINE T* PerThread<T>::getFastCase()
 {
-#if (!defined(__has_include) || !__has_include(<System/pthread_machdep.h>)) && !BCOMPILER_SUPPORTS(CXX_THREAD_LOCAL)
+#if !defined(__APPLE__) && !BCOMPILER_SUPPORTS(CXX_THREAD_LOCAL)
     PerThreadStorage<T>::initSharedKeyIfNeeded(destructor);
 #endif
     return static_cast<T*>(PerThreadStorage<T>::get());
diff --git a/bmalloc/VMAllocate.h b/bmalloc/VMAllocate.h
index ec1a8bd..c398f6e 100644
--- a/bmalloc/VMAllocate.h
+++ b/bmalloc/VMAllocate.h
@@ -31,7 +31,7 @@
 #include "Sizes.h"
 #include "Syscall.h"
 #include <algorithm>
-#if defined(__has_include) && __has_include(<mach/vm_statistics.h>)
+#ifdef __APPLE__
 #include <mach/vm_statistics.h>
 #endif
 #include <sys/mman.h>
